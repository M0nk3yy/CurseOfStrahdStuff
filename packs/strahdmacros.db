{"name":"Investigation Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"inv\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/shadow_11.jpg","actorIds":[],"_id":"0Q6QqSqU32ihqPKj"}
{"name":"Survival Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"sur\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/green_32.jpg","actorIds":[],"_id":"2CzVf3VtDTMrvZKb"}
{"name":"Spike Growth Damage","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"chat","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"<div style=\"font-size: 1.25em; font-family: 'Signika'; font-weight: bold; margin: 0px; padding: 0px;\">Spike Growth</div><hr>\r\n<div style=\"margin-bottom: 7px;\"><b>Damage:</b> [[ ?{Distance Traveled|5 ft,2|10 ft,4|15 ft,6|20 ft,8|25 ft,10|30 ft,12|35 ft,14|40 ft,16}d4 ]] piercing</div>","author":"hxuIOO4uITpZc3pG","img":"systems/dnd5e/icons/spells/vines-acid-2.jpg","actorIds":[],"_id":"Auu4Q6sGKSzGQtyH"}
{"name":"GIFs","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"new Dialog({\r\n  title: \"Gif\",\r\n  content: `<div class=\"form-group\"><input type=\"text\" name=\"url\"/><label for=\"url\">Gif URL</label></div>`,\r\n  buttons: {\r\n     ok: {\r\n        label: \"OK\",\r\n        icon: `<i class=\"fas fa-check\"></i>`,\r\n        callback: html => {\r\n          const url = html.find(\"input\").val();\r\n          ChatMessage.create({\r\n            speaker: ChatMessage.getSpeaker(),\r\n            content: `<img src=${url} />`,\r\n            type: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n          });\r\n          }\r\n        }\r\n        }\r\n    }).render(true);","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/emerald_04.jpg","actorIds":[],"_id":"BADfM74egLOLZrxZ"}
{"name":"Persuasion Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"per\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/light_07.jpg","actorIds":[],"_id":"CjW2Hzdgdfi6wpay"}
{"name":"Perception Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"prc\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/light_02.jpg","actorIds":[],"_id":"FWiKDYMbodD0gyB7"}
{"name":"Athletics Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"ath\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/feats/athletic.jpg","actorIds":[],"_id":"FoPmQpKZSoz4321g"}
{"name":"Blessed","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// new build for bless macro by Penguin#0949 with help from Kotetsushin#7680\r\n// version beta 3.1.1 for workgroups\r\n\r\n// user notes\r\n// this macro is inteded for use by the recipient of the bless spell in D&D 5e on Forge VTT\r\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\r\n\r\n//user modifiable declarations CHANGE AT YOUR OWN RISK\r\nconst blessIconPath = 'icons/svg/angel.svg';\r\nlet blessMsg = ' is blessed!';\r\nlet endblessMsg = ' is no longer blessed.';\r\n\r\n//fixed declarations DO NOT MODIFY\r\nlet Blessd4 = '+1d4';\r\nlet bless = '';\r\nlet chatMsg = '';\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//identify token\r\nif (macroToken === undefined || macroToken === null) {\r\n  ui.notifications.warn(\"Please select a token first.\");\r\n} else {\r\n// grab curent global states\r\n\tlet mwak = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.attack));\r\n\tlet rwak = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.rwak.attack));\r\n\tlet msak = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.msak.attack));\r\n\tlet rsak = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.rsak.attack));\r\n\tlet abilities = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.abilities.save));\r\n\tif(mwak.includes(Blessd4) && rwak.includes(Blessd4) && msak.includes(Blessd4) && rsak.includes(Blessd4) && abilities.includes(Blessd4)){\r\n\t\tbless = true;\r\n\t}\r\n// If not already bless\t\r\n\tif (bless == false || bless === null || bless === undefined || bless == \"\") {\t\r\n// toggle bless icon\r\n\t\tmacroToken.toggleEffect(blessIconPath);  \r\n// anounce to chat\r\n\t\tchatMsg = `${macroActor.name} ${blessMsg}`;\r\n// add bless bonus\r\n\t\tconsole.log('adding bless modifiers to global bonuses');\r\n\t\tlet obj = {};\r\n\t\tobj['data.bonuses.mwak.attack'] = mwak + Blessd4;\r\n\t\tobj['data.bonuses.rwak.attack'] = rwak + Blessd4;\r\n\t\tobj['data.bonuses.msak.attack'] = msak + Blessd4;\r\n\t\tobj['data.bonuses.rsak.attack'] = rsak + Blessd4;\r\n\t\tobj['data.bonuses.abilities.save'] = abilities + Blessd4;\r\n\t\tmacroActor.update(obj);\r\n// if already bless\t\r\n\t}\telse if (bless == true) {\r\n// toggle bless icon\r\n\t\ttoken.toggleEffect(blessIconPath);  \t\t\r\n// anounce to chat\r\n\t\tchatMsg = `${macroActor.name} ${endblessMsg}`;\r\n// remove bless bonus\r\n\t\tconsole.log('resetting global bonuses for bless');\r\n\t\tlet obj = {};\r\n\t\tvar tmp = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.attack));\r\n\t\tvar tmpLength = tmp.indexOf(Blessd4);\r\n        tmp = tmp.substring(0, tmpLength) + tmp.substring(tmpLength+4, tmp.length);\r\n\t\tobj['data.bonuses.mwak.attack'] = tmp;\r\n\t\ttmp = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.rwak.attack));\r\n\t\ttmpLength = tmp.indexOf(Blessd4);\r\n        tmp = tmp.substring(0, tmpLength) + tmp.substring(tmpLength+4, tmp.length);\r\n\t\tobj['data.bonuses.rwak.attack'] = tmp;\r\n\t\ttmp = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.msak.attack));\r\n\t\ttmpLength = tmp.indexOf(Blessd4);\r\n        tmp = tmp.substring(0, tmpLength) + tmp.substring(tmpLength+4, tmp.length);\r\n\t\tobj['data.bonuses.msak.attack'] = tmp;\r\n\t\ttmp = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.rsak.attack));\r\n\t\ttmpLength = tmp.indexOf(Blessd4);\r\n        tmp = tmp.substring(0, tmpLength) + tmp.substring(tmpLength+4, tmp.length);\r\n\t\tobj['data.bonuses.rsak.attack'] = tmp;\r\n\t\ttmp = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.abilities.save));\r\n\t\ttmpLength = tmp.indexOf(Blessd4);\r\n        tmp = tmp.substring(0, tmpLength) + tmp.substring(tmpLength+4, tmp.length);\r\n\t\tobj['data.bonuses.abilities.save'] = tmp;\r\n\t\tmacroActor.update(obj);\r\n\t}\r\n}\r\n  \t\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"Df0buDPEPG2qTr3U","img":"systems/dnd5e/icons/spells/haste-sky-2.jpg","actorIds":[],"_id":"Su8SCYAJkrMguMCk"}
{"name":"Stealth Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"ste\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/green_18.jpg","actorIds":[],"_id":"UsRpTBFgsObyRflF"}
{"name":"Shrink Or Enlarge","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Update selected tokens to flip between a 1x1 or a 2x2 grid.\r\n\r\nfor (let token of canvas.tokens.controlled) {\r\n  let newSize = (token.data.height == 1 && token.data.width == 1) ? 2 : 1;\r\n  token.update({\r\n    height: newSize,\r\n    width: newSize\r\n  });\r\n};","author":"Df0buDPEPG2qTr3U","img":"icons/svg/ice-aura.svg","actorIds":[],"_id":"X2KqjWVDOG8TFnsO"}
{"name":"Acrobatics Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"acr\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/feats/run.jpg","actorIds":[],"_id":"aS3NqgqZw54C7Gwl"}
{"name":"Brutal Strike","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.uwg2s0tRqUMDoI3U"}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\n//\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst sneakIconPath = 'icons/svg/sword.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\n\n\t\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\t\tconst toggleMacro = false;\n\n\t\t\t\t//To use a different icon, manually change the filepath here\n\t\t\t\tconst stopSneakIconPath = '';\n\n\t\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\t\tconst sneakMacroName = 'Sneak Attack';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nlet toggleResult = false;\nlet enabled = false;\nlet errorReason = '';\nlet sneakAttack = {};\nlet rogue = {};\nlet rogueLvls = 0;\nlet sneakDice = 0;\nlet chatMsg = '';\nlet oldMDmg = '';\nlet oldRDmg = '';\n\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\n\n\t\t\t\tconst rogueClassName = 'Rogue';\n\t\t\t\tconst sneakAttackFeatureName = 'Brutal Strike';\n\n\t\t\t\tconst errorSelectRogue = 'Please select a single rogue token.';\n\t\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\n\t\t\t\tconst errorSelectToken = 'Please select a token.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//check to ensure token is selected and attempt to define the sneak attack feature\nif (macroActor !== null && macroActor !== undefined) {\n\tsneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\n} else {\nerrorReason = `${errorSelectToken}`;\n}\n\n//check to ensure token is a rogue\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\n\trogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\n} else {\n\terrorReason = `${errorSelectRogue}`;\n}\n\nconsole.log(`Error reason is: ${errorReason}`);\n//main execution now that errors are caught\n\nif (errorReason == '') {\n\t\n\tchatMsg = '';\n\tlet enabled = false;\n\t// store the state of the sneak attack toggle in flags\n\tif (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\n\t\tenabled = true;\n\t}\n\t\n\t// if sneak attack is active, disable it\n\tif (enabled) {\n\t\tchatMsg = ``;\n\t\t// ranged and melee weapon attack bonus\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro'] = null;\t\t\n\t\tobj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\t\t\t\n\t\tobj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\t\n\t\tmacroActor.update(obj);\n\t\t\n\t// if sneak attack is disabled, enable it\n\t} else {\t\t\n\t\tchatMsg = `An astounding blow!`;\n\t\t\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro.enabled'] = true;\n\n\t\t// Preserve old mwak damage bonus if there was one\n\t\tlet oldMDmg = macroActor.data.data.bonuses.mwak.damage;\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\n\t\tobj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\n\n\t\t// Preserve old rwak damage bonus if there was one\n\t\tlet oldRDmg = macroActor.data.data.bonuses.rwak.damage;\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\n\t\tobj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\n\n\t\t\n\t\t// Determining the rogue level\n\t\trogueLvls = rogue.data.data.levels;\n\n\t\t// Formula to determine the sneak attack damage depending on rogue level\t\n\t\tsneakDice = Math.ceil(rogueLvls/2);\n\t\n\t\t//actually add the bonus sneak attack damage to the previous bonus damage\n\t\t//respect roll formulas if present.\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\n\t\t}\n\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\n\t\t}\t\n\n\t\tmacroActor.update(obj);\n\n\t}\t\n\t\n\t//mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\n\t(async () => { \n\t\ttoggleResult = await macroToken.toggleEffect(sneakIconPath);\n\t\tif (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);  \n\t})();\n\n\t//toggle macro icon and name, if enabled\n\tif (toggleMacro) {\n//\t\tNorc's preferred icons, not sure if publicly available\n//\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\n//\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\n\t\tlet sneakMacro = game.macros.getName(sneakMacroName);\n\t\t\t//Also check for name of macro in its \"off\" form\n\t\t\tif (sneakMacro == null || sneakMacro == undefined) {\n\t\t\t\tsneakMacro = game.macros.getName('Stop ' + sneakMacroName);\n\t\t\t}\n\t\tlet obj = {};\n\t\tif ( (sneakMacro !== null && sneakMacro !== undefined) && \n\t\t\t\t+ (stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '') ) {\n\t\t\tif (enabled) {\n\t\t\tobj['img'] = sneakIconPath;\n\t\t\tobj['name'] = sneakMacroName;\n\t\t\t} else {\n\t\t\tobj['img'] = stopSneakIconPath;\n\t\t\tobj['name'] = 'Stop ' + sneakMacroName;\n\t\t\t}\n\t\t\tsneakMacro.update(obj);\n\t\t} else {\n\t\tui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\t\t\t\n\t\t}\n\t}\n\n} else {\nui.notifications.error(`${errorReason}`);\t\n}\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}","author":"Df0buDPEPG2qTr3U","img":"systems/dnd5e/icons/skills/red_12.jpg","actorIds":[],"_id":"bTn19aA5UqOFx6xV"}
{"name":"Multiattack Defense","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.POmavKphlndq3wGY"}},"scope":"global","command":"let dae_effect = async function() {\nconst effect_name = \"Multiattack Defense\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\nlet condition = effect[i].data.label;\nlet status = effect[i].data.disabled;\nlet effect_id = effect[i].data._id;\nif ((condition === effect_name) && (status === false)) {\nawait token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n}\nif ((condition === effect_name) && (status === true)){\n await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n}\n}\n}\ndae_effect();","author":"Df0buDPEPG2qTr3U","img":"systems/dnd5e/icons/skills/weapon_15.jpg","actorIds":[],"_id":"eg3S3dg9VtEoIj20"}
{"name":"HMSCurse","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.cfwsL2N5e7qivFWV"}},"scope":"global","command":"// Set your curse name here!\nvar curseName = \"HuntersMarkSpecialCurse\";\n\nBetterCurses.curse(curseName);","author":"Df0buDPEPG2qTr3U","img":"systems/pf1/icons/spells/evil-eye-red-3.jpg","actorIds":[],"_id":"f4IHVPiYFuSDVHSV"}
{"name":"Adrenaline Surge","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.5VXYqo51ffjebdSN"}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\n//\n//\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\n//\t\t\t\t\t\t\tFixed rage damage at level 8\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\n//\t\t\t\t\t\t\tFixed rage damage formula again...\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\n//\t\t\t\t\t\t4.\t(2020/06/04) \n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\n//\t\t\t\t\t\t5.\t(2020/06/10)\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\n//\t\t\t\t\t\t\tEnhanced localization support\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\n//!!!\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \n//!!!\t\t\tBear Totem Spirit resistances.\n//!!!\n//!!!\tBonus Tip 3: \t\tThrown Weapons\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\n//!!!\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\n//!!!\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst rageIconPath = 'icons/svg/explosion.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\n\n\t\t\tconst deductResource = true;\n\t\t\tconst preventNegativeResource = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\n//!!!\n\t\t\tconst strAttacks = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\n\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\tconst toggleMacro = false;\n\n\t\t\t//To use a different icon, manually change the filepath here\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\n\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\tconst rageMacroName = 'Rage';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//declarations\nlet barb = '';\nlet chatMsg = '';\nlet bear = '';\nlet noRage = false;\nlet rageDmgAdded = false;\nlet toggleResult = false;\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\n//!!!\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\n\t\t\tconst barbClassName = 'Barbarian';\n\t\t\tconst rageResourceName = 'Adrenaline';\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\n\n\t\t\t//All remaining values may be changed freely\n\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\n\t\t\tconst rageMsg = ' has a surge of adrenaline!'\n\t\t\tconst endRageMsg =  ' feels the adrenaline subside.';\n\n\t\t\t//error and warning messages\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\n\t\t\tconst errorNoRage = ' does not have any adrenaline left, time for a long rest!';\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Adrenaline toggle successful but unable to alter macro.';\n\t\t\tconst errorSelectToken = 'Please select a token.';\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//main\n//check to see if Actor exists and is a barbarian\nif (macroActor !== undefined && macroActor !== null) {\n\n\t// get the barbarian class item\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\n\tif (barb == undefined) {\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\n\t}\n\tif (barb !== undefined && barb !== null) {\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\n\t\tlet enabled = false;\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\n\t\t\t\t\trageDmgAdded = true;\n\t\t\t\t}\n\t\t}\n\n\t\t//Calculate rage value for use in damage reversion and application\n\t\t// Determining the barbarian level\n\t\tlet barblvl = barb.data.data.levels;\n\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\n\n\t\t// if rage is active, disable it\n\t\tif (enabled) {\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\n\t\t\t// reset resistances and melee weapon attack bonus\n\t\t\tlet obj = {};\n\t\t\tobj['flags.rageMacro'] = null;\n\t\t\t//revert damage resistances\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\n\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\n\t\t\t//eventually want to add support so only last instance found is replaced.\n\t\t\tif(rageDmgAdded) {\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\n\t\t\t\t\tconsole.log('Removing simple rage damage');\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Removing complex rage damage');\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\n\t\t\t\t\tlet result = dmg.search(patt);\n\t\t\t\t\tif (result !== -1) {\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmacroActor.update(obj);\n\n\t\t// if rage is disabled, enable it\n\t\t} else {\n\t\t\tif (deductResource) {\n\t\t\t\tlet hasAvailableResource = false;\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\n\t\t\t\tlet obj = {}\n\t\t\t\t// Look for Resources under the Core macroActor data\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\n\t\t\t\t\thasAvailableResource = true;\n\t\t\t\t\tnewResources[resourceKey].value--;\n\t\t\t\t\tobj['data.resources'] = newResources \n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t\tif (!hasAvailableResource) {\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\n\t\t\t\t\tnoRage=true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\n\t\t\tif (!noRage) {\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\n\t\t\t\t// update resistance\n\t\t\t\tlet obj = {};\n\t\t\t\t// storing old resistances in flags to restore later\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\n\t\t\t\t//If bear totem, add bear totem resistances.\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\n\t\t\t\tif (bear !== undefined && bear!== null) {\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\n\t\t\t\t}\n\t\t\t\tobj['data.traits.dr'] = newResistance;\n\t\t\t\tmacroActor.update(obj);\n\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\n\t\t\t\tif (strAttacks) {\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\n\t\t\t\t\t}\n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!noRage) {\n\t\t\t// toggle rage icon, if rage path is defined above\n\t\t\t(async () => { \n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \n\t\t\t})();\n\t\t\t\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\n\t\t\t\t//check for name of macro in its \"off\" form\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\n\t\t\t\t}\n\t\t\tlet obj = {};\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\n\t\t\t\tif (enabled) {\n\t\t\t\t  obj['img'] = rageIconPath;\n\t\t\t\t  obj['name'] = rageMacroName;\n\t\t\t\t} else {\n\t\t\t\t  obj['img'] = stopRageIconPath;\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\n\t\t\t\t}\n\t\t\t\trageMacro.update(obj);\n\t\t\t} else {\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\n\t\t\t}\n\t\t}\n\t}\n} else ui.notifications.warn(errorSelectToken);\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}","author":"Df0buDPEPG2qTr3U","img":"systems/pf1/icons/feats/deafening-critical.jpg","actorIds":[],"_id":"hJ0UMnmTgjv1tSXv"}
{"name":"Light Picker","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let dialogEditor = new Dialog({\r\n  title: `Token Light Picker`,\r\n  content: `Pick the light source the selected token is holding.`,\r\n  buttons: {\r\n    none: {\r\n      label: `None`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    torch: {\r\n      label: `Torch`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    lamp: {\r\n      label: `Lamp`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    bullseye: {\r\n      label: `Bullseye Lantern`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    hoodedOpen: {\r\n      label: `Hooded Lantern (Open)`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    hoodedClosed: {\r\n      label: `Hooded Lantern (Closed)`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    close: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Close`\r\n    },\r\n  },\r\n  default: \"close\",\r\n  close: () => {}\r\n});\r\n\r\ndialogEditor.render(true)","author":"Df0buDPEPG2qTr3U","img":"icons/svg/sun.svg","actorIds":[],"_id":"hvxn0yY4wlRqpDWE"}
{"name":"Intimidation Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"itm\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/red_01.jpg","actorIds":[],"_id":"n16s4ljNzwvriJ5v"}
{"_id":"qJeF6xUuWYHfjst4","name":"Drunnigtreh Bow (Magic Charges)","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"<div style=\"font-size: 1.25em; font-family: 'Signika'; font-weight: bold; margin: 0px; padding: 0px;\">Drunnigtreh Bow Magic Charges</div><hr><div style=\"margin-bottom: 7px;\"><b>Damage:</b> [[ ?{Charges Used|1 ,1d6 +(@prof * 1)|2 ,2d6 + (@prof *  2)|3 ,3d6 + (@prof *  3)|4 ,4d6 + (@prof *  4)|5 ,5d6 + (@prof *  5)} ]] piercing</div>","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/green_01.jpg","actorIds":[]}
{"_id":"qSQXKRbOI7gn3AEt","name":"Equip/Unequip Shield","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\n * Equips/unequips an item. Make sure you change the variables at the top (as required).\n * This script will also error check to make sure items exist and tokens are select. \n * Chat and token icon display options can be set as desired.\n */\n\nlet itemName = 'Shield'; // <--- Change this to the *exact* item name (capitals count!)\nlet sendToChat = false; // <--- Change to 'true' or 'false' to display a chat message about equipping\nlet displayIcon = false; // <--- Change to 'true' or 'false' to display an effect icon when equipped\nconst effectIconPath = 'icons/svg/shield.svg'; // <--- Add the effect icon you want to appear when equipped\n\nlet toggleResult = false;\n\nif (!actor) {\n    ui.notifications.warn('You need to select a token before using this macro!');\n} else {\n\n\tlet myItem = actor.items.find(i => i.name == itemName);\n\tif (myItem != null)\n\t{\n\t\tlet item = actor.getOwnedItem(myItem._id);\n\t\tlet attr = \"data.equipped\";\n\t\tlet equipped = getProperty(item.data, attr);\n\t\tif (sendToChat) {\t\t\t\n\t\t\tif (!equipped) {\n\t\t\t\tchatMessage(actor.name + ' <b>equips</b> the <i>' + ' ' + itemName+ '</i>');\n\t\t\t} else {\n\t\t\t\tchatMessage(actor.name + ' <b>un-equips</b> the <i>' + ' ' + itemName + '</i>');\t\t\t\n\t\t\t}\n\t\t}\n\t\titem.update({[attr]: !getProperty(item.data, attr)});\n\t\t\n\t\t// mark/unmark character's token with an effect icon when displayToken is true\n\t\t(async () => { \n\t\t\tif (displayIcon) {\n\t\t\t\ttoggleResult = await token.toggleEffect(effectIconPath);\n\t\t\t\tif (toggleResult == equipped) token.toggleEffect(effectIconPath);  \n\t\t\t}\n\t\t})();\n\t\t\n\t} else {\n\t\tui.notifications.warn(\"No item named '\" + itemName + \"' found on character!\");\n\t}\n}\n\nfunction chatMessage(messageContent) {\n\t// create the message\n\tif (messageContent !== '') {\n\t\tlet chatData = {\n\t\t\tuser: game.user._id,\n\t\t\tspeaker: ChatMessage.getSpeaker(),\n\t\t\tcontent: messageContent,\n\t\t};\n\t\tChatMessage.create(chatData, {});\n\t}\n}","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/items/armor/buckler.PNG","actorIds":[]}
{"name":"Insight Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"actor.rollSkill(\"ins\")","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/red_09.jpg","actorIds":[],"_id":"rwqaie35ZJoUh873"}
{"name":"Norris Perception Check","permission":{"default":0,"hxuIOO4uITpZc3pG":3},"type":"chat","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"#Norris Perception Check\r\n\r\n/r 2d20kh+3","author":"hxuIOO4uITpZc3pG","img":"systems/pf1/icons/skills/shadow_12.jpg","actorIds":[],"_id":"yTJP5LDaelJNUt1i"}
{"name":"HMCurse","permission":{"default":0,"Df0buDPEPG2qTr3U":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.NLmegENQIEaqMjgx"}},"scope":"global","command":"// Set your curse name here!\nvar curseName = \"HuntersMarkCurse\";\n\nBetterCurses.curse(curseName);","author":"Df0buDPEPG2qTr3U","img":"systems/pf1/icons/spells/evil-eye-red-1.jpg","actorIds":[],"_id":"zfyTYEGdm508zIMK"}
